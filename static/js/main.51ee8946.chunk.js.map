{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","titleQuery","status","handleChange","e","target","name","value","setState","TodosToDisplay","props","todos","filter","todo","title","toLowerCase","includes","completed","filterByStatus","this","selectUser","selectedUserId","displayedTodos","className","type","placeholder","onChange","id","defaultValue","map","classNames","checked","handleChecked","readOnly","userId","onClick","React","Component","getTodos","fetch","then","response","json","CurrentUser","user","loadCurrentUser","prevProp","catch","error","console","warn","email","phone","clearUser","App","loading","loadTodos","a","newTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.51ee8946.chunk.js","sourcesContent":["/* eslint-disable no-console */\n/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  todos: Todo[];\n  selectUser: (id:number) => void;\n  selectedUserId: User['id'];\n  handleChecked: (id:number) => void;\n};\n\ntype State = {\n  titleQuery: string;\n  status: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state:State = {\n    titleQuery: '',\n    status: 'All',\n  };\n\n  handleChange = (\n    e:React.ChangeEvent<HTMLSelectElement> | React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    this.setState({\n      [name]: value,\n    } as Pick<State, 'titleQuery'>);\n  };\n\n  TodosToDisplay = () => {\n    const { titleQuery, status } = this.state;\n\n    const filterByStatus = (todo:Todo) => {\n      switch (status) {\n        case 'completed':\n          return todo.completed;\n        case 'notCompleted':\n          return !todo.completed;\n        default:\n          return true;\n      }\n    };\n\n    return this.props.todos.filter(todo => (\n      todo.title.toLowerCase().includes(titleQuery.toLowerCase())\n      && filterByStatus(todo)\n    ));\n  };\n\n  render() {\n    const { todos, selectUser, selectedUserId } = this.props;\n    const { status } = this.state;\n\n    const displayedTodos = this.TodosToDisplay();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"filterPanel\">\n          <input\n            className=\"filterTodo\"\n            type=\"text\"\n            placeholder=\"search for todos\"\n            name=\"titleQuery\"\n            onChange={this.handleChange}\n          />\n\n          <select\n            className=\"filterTodo\"\n            name=\"status\"\n            id=\"\"\n            defaultValue={status}\n            onChange={this.handleChange}\n          >\n            <option value=\"All\">All</option>\n            <option value=\"completed\">Completed</option>\n            <option value=\"notCompleted\">Still in process</option>\n          </select>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {todos && displayedTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  classNames(\n                    'TodoList__item',\n                    { 'TodoList__item--unchecked': !todo.completed },\n                  )\n                }\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    onChange={() => {\n                      this.props.handleChecked(todo.id);\n                    }}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={\n                    classNames(\n                      'TodoList__user-button', 'button',\n                      { 'TodoList__user-button--selected': todo.userId === selectedUserId },\n                    )\n                  }\n                  type=\"button\"\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = () => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId:number) => {\n  return fetch(`https://mate.academy/students-api/users/${userId}`)\n    .then(response => response.json());\n};\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { getUsers } from '../../api/api';\nimport './CurrentUser.scss';\n\ntype Props = {\n  userId: number;\n  clearUser: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state:State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadCurrentUser();\n  }\n\n  componentDidUpdate(prevProp: Props) {\n    if (prevProp.userId !== this.props.userId) {\n      this.loadCurrentUser();\n    }\n  }\n\n  loadCurrentUser() {\n    getUsers(this.props.userId)\n      .then(user => {\n        this.setState({ user });\n      })\n      .catch(error => {\n        console.warn(error);\n      });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    return (\n      <>\n        {user && (\n          <div className=\"CurrentUser\">\n            <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${user.id}`}</span></h2>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n          </div>\n        )}\n        <button\n          type=\"button\"\n          onClick={this.props.clearUser}\n          className=\"\n          button\n          button--clear\n          TodoList__user-button--selected\"\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n","/* eslint-disable no-console */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  loading: boolean;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    loading: false,\n  };\n\n  componentDidMount() {\n    this.loadTodos();\n  }\n\n  loadTodos = async () => {\n    this.setState({ loading: true });\n\n    try {\n      const todos = await getTodos();\n\n      this.setState({\n        todos,\n        loading: false,\n      });\n    } catch (error) {\n      console.warn(error);\n      this.setState({\n        loading: false,\n      });\n    }\n  };\n\n  selectUser = (id:number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  handleChecked = (id:number) => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    this.setState(() => ({\n      todos: newTodos,\n    }));\n  };\n\n  render() {\n    const { selectedUserId, todos, loading } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          {loading\n            ? 'loading'\n            : (\n              <TodoList\n                todos={todos}\n                selectUser={this.selectUser}\n                selectedUserId={selectedUserId}\n                handleChecked={this.handleChecked}\n              />\n            )}\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}